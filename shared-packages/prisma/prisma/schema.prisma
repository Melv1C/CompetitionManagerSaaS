// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}
/////////////////////////
// User
/////////////////////////
model User {
    id              Int              @id @default(autoincrement())
    email           String           @unique
    role            String
    password        String
    preferences     UserPreferences?
    admin           Admin[]
    club            Club?            @relation(fields: [clubId], references: [id])
    clubId          Int?             @map("club_id")
    inscriptions    Inscription[]

    @@map("users")
}

/////////////////////////
// UserPreferences
/////////////////////////
model UserPreferences {
    id        Int       @id @default(autoincrement())
    user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId    Int       @unique @map("user_id")
    theme     String
    language  String

    @@map("user_preferences")
}

/////////////////////////
// Athlete
/////////////////////////
model Athlete {
    id            Int          @id @default(autoincrement())
    license       String
    firstName     String       @map("first_name")
    lastName      String       @map("last_name")
    bib           Int
    gender        String
    birthdate     DateTime
    club          Club         @relation(fields: [clubId], references: [id])
    clubId        Int          @map("club_id")
    metadata      Json         @default("{}")
    competition   Competition? @relation(fields: [competitionId], references: [id], onDelete: Cascade)
    competitionId Int?         @map("competition_id")
    inscriptions  Inscription[]

    @@map("athletes")
}

////////////////
// Event
////////////////
model Event {
    id                Int                 @id @default(autoincrement())
    name              String              @unique
    abbr              String
    group             String
    type              String
    competitionEvents CompetitionEvent[]
    
    @@map("events")
}

////////////////
// Category
////////////////
model Category {
    id                Int                @id @default(autoincrement())
    name              String             @unique
    abbr              String             @unique
    baseCategory      String             @map("base_category")
    abbrBaseCategory  String             @map("abbr_base_category")
    gender            String
    masterAgeGroup    Int?               @map("master_age_group")
    order             Int
    competitionEvents CompetitionEvent[]

    @@map("categories")
}

////////////////
// Competition event
////////////////
model CompetitionEvent {
    id                Int                @id @default(autoincrement())
    eid               String             @unique @default(uuid())
    name              String
    event             Event              @relation(fields: [eventId], references: [id])
    eventId           Int                @map("event_id")
    schedule          DateTime
    categories        Category[]
    place             Int?
    parentEvent       CompetitionEvent?  @relation("ParentEventToCompetitionEvent", fields: [parentId], references: [id], onDelete: Cascade)
    subEvents         CompetitionEvent[] @relation("ParentEventToCompetitionEvent") 
    parentId          Int?               @map("parent_id")
    cost              Float
    isInscriptionOpen Boolean            @map("is_inscription_open")
    competition       Competition        @relation(fields: [competitionId], references: [id], onDelete: Cascade)
    competitionId     Int                @map("competition_id")
    inscriptions      Inscription[]

    @@map("competition_events")
}

////////////////
// Competition
////////////////
model Competition {
    id                   Int                 @id @default(autoincrement())
    eid                  String              @unique @default(uuid())
    name                 String
    date                 DateTime
    description          String              @db.Text  
    events               CompetitionEvent[]  
    publish              Boolean
    method               String
    startInscriptionDate DateTime?           @map("start_inscription_date")
    endInscriptionDate   DateTime?           @map("end_inscription_date")
    admins               Admin[]
    email                String
    closeDate            DateTime?           @map("close_date")
    freeClubs            Club[]              @relation("FreeClubsToCompetition")
    oneDayPermissions    String[]            @map("one_day_permission")        
    oneDayBibStart       Int                 @map("one_day_bib_start")
    oneDayAthletes       Athlete[]
    paymentPlan          PaymentPlan         @relation(fields: [paymentPlanId], references: [id])
    paymentPlanId        Int                 @map("payment_plan_id")
    options              Option[] 
    inscriptions         Inscription[]
    club                 Club?               @relation(fields: [clubId], references: [id])
    clubId               Int?                @map("club_id")
    isDeleted            Boolean             @map("is_deleted")
    
    @@map("competitions")
}

////////////////
// Admin
////////////////
model Admin {
    id            Int         @id @default(autoincrement())
    user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId        Int         @map("user_id")
    competition   Competition @relation(fields: [competitionId], references: [id], onDelete: Cascade)
    competitionId Int         @map("competition_id")
    access        String[]

    @@map("admins")
}

////////////////
// Option
////////////////
model Option {
    id               Int         @id @default(autoincrement())
    name             String
    description      String
    price            Float
    PaymentPlans     PaymentPlan[]
    Competitions     Competition[]

    @@map("options")
}

////////////////
// Payment plan
////////////////
model PaymentPlan {
    id               Int         @id @default(autoincrement())
    name             String
    description      String
    includedOptions  Option[]
    price            Float
    Competition      Competition[]
    
    @@map("payment_plans")
}

////////////////
// Club
////////////////
model Club {
    id               Int           @id @default(autoincrement())
    name             String
    abbr             String        @unique
    address          String?
    province         String?
    country          String
    fedNumber        Int?          @map("fed_number")
    fedAbbr          String?       @map("fed_abbr")
    athletes         Athlete[]
    competitions     Competition[]
    users            User[]
    freeCompetitions Competition[] @relation("FreeClubsToCompetition")
    inscriptions     Inscription[]

    @@map("clubs")
}

////////////////
// Inscription
////////////////
model Inscription {
    id                  Int                @id @default(autoincrement())
    eid                 String             @unique @default(uuid())
    athlete             Athlete            @relation(fields: [athleteId], references: [id], onDelete: Cascade)
    athleteId           Int                @map("athlete_id")
    competitionEvent    CompetitionEvent   @relation(fields: [competitionEventId], references: [id], onDelete: Cascade)
    competitionEventId  Int                @map("competition_event_id")
    competition         Competition        @relation(fields: [competitionId], references: [id], onDelete: Cascade)
    competitionId       Int                @map("competition_id")
    paid                Int
    status              String
    user                User               @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId              Int                @map("user_id")
    bib                 Int
    club                Club               @relation(fields: [clubId], references: [id]) //liaison ou juste abbr
    clubId              Int                @map("club_id")
    record              Record?            
    isDeleted           Boolean            @map("is_deleted")
    
    @@map("inscriptions")
}

////////////////
// Record
////////////////
model Record {
    id              Int             @id @default(autoincrement())
    perf            Int
    date            DateTime
    location        String?
    inscriptions    Inscription     @relation(fields: [inscriptionId], references: [id])
    inscriptionId   Int             @unique @map("inscription_id")

    @@map("records")
}

////////////////
// Log
////////////////
model Log {
    id            Int      @id @default(autoincrement())
    level         String
    service       String
    path          String?
    status        Int?
    userId        Int?
    message       String
    date          DateTime
    metadata      Json?

    @@map("logs")
}