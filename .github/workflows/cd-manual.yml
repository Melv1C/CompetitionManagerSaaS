name: Manual Deployment - Build and Push All Apps and Deploy to Staging or Prod

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to (staging or prod)'
        required: true
        default: 'staging'

jobs:
  validate-input:
    runs-on: ubuntu-latest
    steps:
      - name: Validate environment input
        run: |
          if [[ "${{ github.event.inputs.environment }}" != "staging" && "${{ github.event.inputs.environment }}" != "prod" ]]; then
            echo "Invalid environment: ${{ github.event.inputs.environment }}"
            exit 1
          fi

  build-and-push:
    runs-on: ubuntu-latest
    needs: validate-input
    env:
      BUILD_BRANCH: ${{ github.event.inputs.environment == 'prod' && 'prod' || 'main' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          ref: ${{ env.BUILD_BRANCH }}

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and Push Migrate DB
        run: |
          cd shared-packages/prisma
          docker build -t ${{ secrets.DOCKER_USERNAME }}/migrate-db:${{ github.event.inputs.environment }} .
          docker push ${{ secrets.DOCKER_USERNAME }}/migrate-db:${{ github.event.inputs.environment }}

      - name: Build and Push All Apps
        run: |
          for app in apps/*; do
            if [ -d "$app" ]; then
              app_name=$(basename "$app")
              dockerfile="$app/Dockerfile"
              if [ ! -f "$dockerfile" ]; then
                echo "Dockerfile not found for $app_name, skipping..."
                continue
              fi
              echo "Building and pushing Docker image for $app_name"
              docker build -f "$dockerfile" -t ${{ secrets.DOCKER_USERNAME }}/${app_name}:${{ github.event.inputs.environment }} .
              docker push ${{ secrets.DOCKER_USERNAME }}/${app_name}:${{ github.event.inputs.environment }}
            fi
          done

  manual-deploy:
    runs-on: ubuntu-latest
    needs: build-and-push
    steps:
      - name: Deploy to Manual VPS
        uses: appleboy/ssh-action@v0.1.8
        with:
          host: ${{ secrets.VPS_SSH_HOST }}
          username: ${{ secrets.VPS_SSH_USERNAME }}
          password: ${{ secrets.VPS_SSH_PASSWORD }}
          script: |
            path="./deploy/${{ github.event.inputs.environment }}"
            cd $path
            docker-compose pull
            docker-compose up -d
            docker-compose restart nginx
