name: Staging Deployment - Build and Push Modified Apps

on:
  push:
    branches:
      - main

jobs:
  docker-build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Identify Changed Services
        id: changed-services
        run: |
          prev_commit=$(git rev-parse ${{ github.sha }}~1 || echo "")
          changed_apps=""
          for app in apps/*; do
            if [ -d "$app" ]; then
              app_name=$(basename "$app")
              if [ -n "$prev_commit" ] && git diff --name-only $prev_commit..${{ github.sha }} | grep -q "^$app"; then
                changed_apps="$changed_apps $app_name"
                echo "Detected changes in $app_name"
              fi
            fi
          done
          echo "changed_apps=$changed_apps" >> $GITHUB_ENV


      - name: Build and Push Changed Apps
        run: |
          if [ -z "${{ env.changed_apps }}" ]; then
            echo "No changes detected in apps, skipping build and push."
          else
            for app in ${{ env.changed_apps }}; do
              dockerfile="apps/$app/Dockerfile"
              if [ ! -f "$dockerfile" ]; then
                echo "Dockerfile not found for $app_name, skipping..."
                continue
              fi
              echo "Building and pushing Docker image for $app"
              docker build -f "$dockerfile" -t ${{ secrets.DOCKER_USERNAME }}/${app}:staging .
              docker push ${{ secrets.DOCKER_USERNAME }}/${app}:staging
            done
          fi

  deploy-staging:
    runs-on: ubuntu-latest
    needs: docker-build
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Deploy to Staging VPS
        uses: appleboy/ssh-action@v0.1.8
        with:
          host: ${{ secrets.VPS_SSH_HOST }}
          username: ${{ secrets.VPS_SSH_USERNAME }}
          password: ${{ secrets.VPS_SSH_PASSWORD }}
          script: |
            cd ./deploy/staging
            docker-compose pull
            docker-compose up -d
